import 'package:attendance_app/models/user_info.dart';
import 'package:attendance_app/services/firebase_services.dart';
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:cloud_firestore/cloud_firestore.dart';

class AttendanceTable extends StatefulWidget {
  @override
  _AttendanceTableState createState() => _AttendanceTableState();
}

class _AttendanceTableState extends State<AttendanceTable> {

    @override
  void initState() {
    super.initState();
    // Call fetchUsersWithTimeEntries to populate the cache initially
    context.read<FirestoreService>().fetchUsersWithTimeEntries();
    }
  
  @override
  Widget build(BuildContext context) {
    return Consumer<FirestoreService>(
      builder: (context, firestoreService, child) {
        return Padding(
          padding: const EdgeInsets.all(16.0),
          child: Container(
            decoration: BoxDecoration(
              color: Colors.grey.shade300,
              borderRadius: BorderRadius.circular(16.0),
            ),
            padding: const EdgeInsets.all(16.0),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                const Text(
                  'This week',
                  style: TextStyle(
                    fontSize: 20,
                    fontWeight: FontWeight.bold,
                  ),
                ),
                const SizedBox(height: 10),
                // Use the cached data from FirestoreService
                Table(
                  columnWidths: const {
                    0: FlexColumnWidth(3),
                    1: FlexColumnWidth(1),
                    2: FlexColumnWidth(1),
                    3: FlexColumnWidth(1),
                    4: FlexColumnWidth(1),
                    5: FlexColumnWidth(1),
                  },
                  children: _buildTableRows(firestoreService.usersWithTimeEntriesCache['allUsers'] ?? []),
                ),
              ],
            ),
          ),
        );
      },
    );
  }

  List<TableRow> _buildTableRows(List<Employee> usersWithAttendance) {
    List<TableRow> rows = [
      TableRow(
        children: [
          const Padding(
            padding: EdgeInsets.all(8.0),
            child: Text('Days', style: TextStyle(fontWeight: FontWeight.bold)),
          ),
          const Padding(
            padding: EdgeInsets.all(8.0),
            child: Text('M', style: TextStyle(fontWeight: FontWeight.bold)),
          ),
          const Padding(
            padding: EdgeInsets.all(8.0),
            child: Text('T', style: TextStyle(fontWeight: FontWeight.bold)),
          ),
          const Padding(
            padding: EdgeInsets.all(8.0),
            child: Text('W', style: TextStyle(fontWeight: FontWeight.bold)),
          ),
          const Padding(
            padding: EdgeInsets.all(8.0),
            child: Text('T', style: TextStyle(fontWeight: FontWeight.bold)),
          ),
          const Padding(
            padding: EdgeInsets.all(8.0),
            child: Text('F', style: TextStyle(fontWeight: FontWeight.bold)),
          ),
        ],
      ),
    ];

    for (var user in usersWithAttendance) {
      String name = '${user.firstName} ${user.lastName}';
      List<TimeEntry>? timeEntries = user.timeEntries;

      rows.add(_buildTableRow(name, timeEntries));
    }

    return rows;
  }

  TableRow _buildTableRow(String name, List<TimeEntry>? timeEntries) {
    List<Widget> rowCells = [
      Padding(
        padding: const EdgeInsets.all(8.0),
        child: Text(name),
      ),
    ];

    DateTime now = DateTime.now();
    DateTime monday = now.subtract(Duration(days: now.weekday - 1));

    for (int i = 0; i < 5; i++) {
      DateTime day = monday.add(Duration(days: i));
      DateTime cutoffTime = DateTime(day.year, day.month, day.day, 17, 0); // 5:00 PM

      Widget icon;
      if (now.isBefore(day)) {
        icon = Icon(Icons.access_time, color: Colors.grey); // Clock icon for future days
      } else if (timeEntries != null &&
          timeEntries.any((entry) =>
              entry.date!.toDate().year == day.year &&
              entry.date!.toDate().month == day.month &&
              entry.date!.toDate().day == day.day)) {
        icon = Icon(Icons.circle, color: Colors.green); // Green circle for clocked in
      } else if (now.isAfter(cutoffTime)) {
        icon = Icon(Icons.circle, color: Colors.red); // Red circle for missing clock-in after 5:00 PM
      } else {
        icon = Icon(Icons.access_time, color: Colors.grey); // Clock icon for future days
      }

      rowCells.add(Padding(padding: const EdgeInsets.all(8.0), child: icon));
    }

    return TableRow(children: rowCells);
  }
}
