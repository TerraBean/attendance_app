import 'package:flutter/material.dart';

class AttendanceTable extends StatefulWidget {
  @override
  _AttendanceTableState createState() => _AttendanceTableState();
}

class _AttendanceTableState extends State<AttendanceTable> {
  List<Map<String, dynamic>> usersWithAttendance = [];

  @override
  void initState() {
    super.initState();
    _fetchAttendanceData();
  }

  Future<void> _fetchAttendanceData() async {
    // Fetch data from fetchUsersWithTimeEntriesForCurrentWeek
    // This function should return a list of maps, where each map contains
    // a 'name' and a 'timeEntries' (a list of DateTimes for the current week)
    List<Map<String, dynamic>> data = await fetchUsersWithTimeEntriesForCurrentWeek();

    setState(() {
      usersWithAttendance = data;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Padding(
      padding: const EdgeInsets.all(16.0),
      child: Container(
        decoration: BoxDecoration(
          color: Colors.grey.shade300,
          borderRadius: BorderRadius.circular(16.0),
        ),
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            const Text(
              'This week',
              style: TextStyle(
                fontSize: 20,
                fontWeight: FontWeight.bold,
              ),
            ),
            const SizedBox(height: 10),
            Table(
              columnWidths: const {
                0: FlexColumnWidth(3),
                1: FlexColumnWidth(1),
                2: FlexColumnWidth(1),
                3: FlexColumnWidth(1),
                4: FlexColumnWidth(1),
                5: FlexColumnWidth(1),
              },
              children: _buildTableRows(),
            ),
          ],
        ),
      ),
    );
  }

  List<TableRow> _buildTableRows() {
    List<TableRow> rows = [
      TableRow(
        children: [
          const Padding(
            padding: EdgeInsets.all(8.0),
            child: Text('Days', style: TextStyle(fontWeight: FontWeight.bold)),
          ),
          const Padding(
            padding: EdgeInsets.all(8.0),
            child: Text('M', style: TextStyle(fontWeight: FontWeight.bold)),
          ),
          const Padding(
            padding: EdgeInsets.all(8.0),
            child: Text('T', style: TextStyle(fontWeight: FontWeight.bold)),
          ),
          const Padding(
            padding: EdgeInsets.all(8.0),
            child: Text('W', style: TextStyle(fontWeight: FontWeight.bold)),
          ),
          const Padding(
            padding: EdgeInsets.all(8.0),
            child: Text('T', style: TextStyle(fontWeight: FontWeight.bold)),
          ),
          const Padding(
            padding: EdgeInsets.all(8.0),
            child: Text('F', style: TextStyle(fontWeight: FontWeight.bold)),
          ),
        ],
      ),
    ];

    for (var user in usersWithAttendance) {
      String name = user['name'];
      List<DateTime> timeEntries = user['timeEntries'];

      rows.add(_buildTableRow(name, timeEntries));
    }

    return rows;
  }

  TableRow _buildTableRow(String name, List<DateTime> timeEntries) {
    List<Widget> rowCells = [
      Padding(
        padding: const EdgeInsets.all(8.0),
        child: Text(name),
      ),
    ];

    DateTime now = DateTime.now();
    DateTime monday = now.subtract(Duration(days: now.weekday - 1));

    for (int i = 0; i < 5; i++) {
      DateTime day = monday.add(Duration(days: i));
      bool present = timeEntries.any((entry) =>
          entry.year == day.year &&
          entry.month == day.month &&
          entry.day == day.day);

      rowCells.add(
        Padding(
          padding: const EdgeInsets.all(8.0),
          child: Icon(
            present ? Icons.check_circle : Icons.cancel,
            color: present ? Colors.green : Colors.red,
          ),
        ),
      );
    }

    return TableRow(children: rowCells);
  }

  Future<List<Map<String, dynamic>>> fetchUsersWithTimeEntriesForCurrentWeek() async {
  return [
    {
      'name': 'Adams Mujahid',
      'timeEntries': [
        DateTime.now().subtract(Duration(days: 1)), // Previous day
        DateTime.now().subtract(Duration(days: 3)), // 3 days ago
        DateTime.now().subtract(Duration(days: 5)), // 5 days ago
      ],
    },
    {
      'name': 'Linda Adu',
      'timeEntries': [
        DateTime.now(), // Today
        DateTime.now().subtract(Duration(days: 2)), // 2 days ago
        DateTime.now().subtract(Duration(days: 4)), // 4 days ago
      ],
    },
    {
      'name': 'Ernest Adjei',
      'timeEntries': [
        DateTime.now().subtract(Duration(days: 1)), // Previous day
        DateTime.now().subtract(Duration(days: 2)), // 2 days ago
      ],
    },
    {
      'name': 'Grace Yeboah',
      'timeEntries': [
        DateTime.now(), // Today
        DateTime.now().subtract(Duration(days: 1)), // Previous day
        DateTime.now().subtract(Duration(days: 2)), // 2 days ago
        DateTime.now().subtract(Duration(days: 3)), // 3 days ago
        DateTime.now().subtract(Duration(days: 4)), // 4 days ago
      ],
    },
    {
      'name': 'Samuel Owusu',
      'timeEntries': [
        DateTime.now().subtract(Duration(days: 2)), // 2 days ago
        DateTime.now().subtract(Duration(days: 3)), // 3 days ago
      ],
    },
    {
      'name': 'Patricia Mensah',
      'timeEntries': [
        DateTime.now(), // Today
        DateTime.now().subtract(Duration(days: 1)), // Previous day
      ],
    },
    {
      'name': 'John Doe',
      'timeEntries': [
        DateTime.now().subtract(Duration(days: 1)), // Previous day
        DateTime.now().subtract(Duration(days: 3)), // 3 days ago
      ],
    },
    {
      'name': 'Mary Johnson',
      'timeEntries': [
        DateTime.now().subtract(Duration(days: 1)), // Previous day
        DateTime.now().subtract(Duration(days: 2)), // 2 days ago
        DateTime.now().subtract(Duration(days: 4)), // 4 days ago
      ],
    },
    {
      'name': 'Michael Tetteh',
      'timeEntries': [
        DateTime.now().subtract(Duration(days: 2)), // 2 days ago
        DateTime.now().subtract(Duration(days: 5)), // 5 days ago
      ],
    },
    {
      'name': 'Sophia Nyarko',
      'timeEntries': [
        DateTime.now().subtract(Duration(days: 1)), // Previous day
        DateTime.now().subtract(Duration(days: 3)), // 3 days ago
        DateTime.now().subtract(Duration(days: 5)), // 5 days ago
        DateTime.now().subtract(Duration(days: 6)), // 6 days ago
      ],
    },
  ];
}

}
